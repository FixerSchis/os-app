name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - master

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        # Create a temporary directory for deployment files
        mkdir -p /tmp/deploy-temp
        cd /tmp/deploy-temp

        # Copy files to temp directory, excluding unnecessary ones
        rsync -av --exclude='.git' \
                  --exclude='.github' \
                  --exclude='tests' \
                  --exclude='venv' \
                  --exclude='__pycache__' \
                  --exclude='.pytest_cache' \
                  --exclude='htmlcov' \
                  --exclude='.coverage' \
                  --exclude='.gitignore' \
                  --exclude='.pre-commit-config.yaml' \
                  --exclude='pyproject.toml' \
                  --exclude='scripts/setup_dev_environment.py' \
                  --exclude='scripts/setup_dev.py' \
                  --exclude='scripts/verify_ci_setup.py' \
                  --exclude='*.pyc' \
                  --exclude='*.pyo' \
                  --exclude='*.log' \
                  --exclude='.DS_Store' \
                  --exclude='Thumbs.db' \
                  $GITHUB_WORKSPACE/ .

        # Create deployment archive
        tar -czf $GITHUB_WORKSPACE/deployment.tar.gz .

        # Clean up temp directory
        cd $GITHUB_WORKSPACE
        rm -rf /tmp/deploy-temp

    - name: Copy deployment package to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: os-app
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT || 22 }}
        source: "deployment.tar.gz"
        target: "/tmp"

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: os-app
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT || 22 }}
        script: |
          # Set deployment variables
          APP_NAME="os-app"
          DEPLOY_DIR="/opt/$APP_NAME"
          BACKUP_DIR="/opt/backups/$APP_NAME"
          DB_DIR="/var/lib/$APP_NAME"
          SERVICE_NAME="$APP_NAME"

          # Create backup directory if it doesn't exist
          sudo mkdir -p $BACKUP_DIR

          # Create timestamp for backup
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)

          # Backup current deployment if it exists
          if [ -d "$DEPLOY_DIR" ]; then
            echo "Creating backup of current deployment..."
            sudo tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" -C /opt $APP_NAME

            # Preserve .env file if it exists
            if [ -f "$DEPLOY_DIR/.env" ]; then
              echo "Preserving .env file..."
              sudo cp "$DEPLOY_DIR/.env" "/tmp/os-app.env.backup"
            fi

            sudo rm -rf "$DEPLOY_DIR"
          fi

          # Ensure persistent directories exist and have correct permissions
          echo "Setting up persistent directories..."
          sudo mkdir -p $DB_DIR
          sudo chown os-app:os-app $DB_DIR
          sudo chmod 755 $DB_DIR

          # Create deployment directory
          sudo mkdir -p $DEPLOY_DIR
          sudo chown os-app:os-app $DEPLOY_DIR

          # Extract new deployment
          cd $DEPLOY_DIR
          tar -xzf /tmp/deployment.tar.gz

          # Restore .env file if it was preserved
          if [ -f "/tmp/os-app.env.backup" ]; then
            echo "Restoring .env file from backup..."
            sudo -u os-app cp "/tmp/os-app.env.backup" ".env"
            sudo rm "/tmp/os-app.env.backup"
          fi

          # Set up Python virtual environment
          sudo -u os-app python3 -m venv venv
          sudo -u os-app venv/bin/pip install --upgrade pip
          sudo -u os-app venv/bin/pip install -r requirements.txt

          # Set up environment variables (only if .env doesn't exist)
          if [ ! -f .env ]; then
            echo "Creating .env file from template..."
            sudo -u os-app cp env.example .env 2>/dev/null || sudo -u os-app echo "# Add your environment variables here" > .env
          fi

          # Ensure DATABASE_PATH is set in .env for production
          if ! sudo -u os-app grep -q "^DATABASE_PATH=" .env; then
            echo "Adding DATABASE_PATH to .env..."
            sudo -u os-app echo "DATABASE_PATH=$DB_DIR" >> .env
          fi

          # Get port from .env file or use default
          PORT=$(sudo -u os-app grep "^PORT=" .env 2>/dev/null | cut -d'=' -f2 || echo "5000")
          echo "Using port: $PORT"

          # Run database migrations
          echo "Running database migrations..."
          sudo -u os-app venv/bin/flask db upgrade

          # Populate default data
          echo "Populating default data..."
          cd $DEPLOY_DIR
          sudo -u os-app venv/bin/python scripts/populate_default_data.py

          # Set proper permissions
          sudo chown -R os-app:os-app $DEPLOY_DIR
          sudo chmod -R 755 $DEPLOY_DIR

          # Always overwrite the systemd service file to ensure it's up to date
          echo "Creating/Updating systemd service..."
          sudo tee /etc/systemd/system/$SERVICE_NAME.service > /dev/null <<EOF
          [Unit]
          Description=OS App Flask Application
          After=network.target

          [Service]
          Type=simple
          User=os-app
          WorkingDirectory=$DEPLOY_DIR
          Environment=PATH=$DEPLOY_DIR/venv/bin
          Environment=FLASK_APP=app.py
          Environment=FLASK_ENV=production
          Environment=DATABASE_PATH=$DB_DIR
          ExecStart=$DEPLOY_DIR/venv/bin/gunicorn -c gunicorn.conf.py wsgi:application
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
          EOF

          sudo systemctl daemon-reload
          sudo systemctl enable $SERVICE_NAME

          # Restart the service
          echo "Restarting service..."
          sudo systemctl restart $SERVICE_NAME

          # Wait for service to be ready
          sleep 10

          # Check if service is running
          if sudo systemctl is-active --quiet $SERVICE_NAME; then
            echo "Deployment successful! Service is running on port $PORT."
            echo "Database location: $DB_DIR"
          else
            echo "Deployment failed! Service is not running."
            sudo systemctl status $SERVICE_NAME
            exit 1
          fi

          # Clean up old backups (keep last 5)
          cd $BACKUP_DIR
          ls -t | tail -n +6 | xargs -r sudo rm -f

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 7

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed!"
        fi
